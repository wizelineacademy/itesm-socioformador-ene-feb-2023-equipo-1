{
  "version": 3,
  "sources": ["../../../app/components/AnswerBot/AnswerBot.jsx", "../../../app/components/AnswerBot/AnswerBot.Styled.jsx", "../../../app/controllers/answerBot/pdfConv.js", "../../../app/components/AnswerBot/index.js"],
  "sourcesContent": ["import * as Styled from 'app/components/AnswerBot/AnswerBot.Styled';\nimport React, { useEffect, useRef, useState } from 'react';\nimport pdfConv from 'app/controllers/answerBot/pdfConv';\nimport PropTypes from 'prop-types';\nimport useUser from 'app/utils/hooks/useUser';\n\nfunction AnswerBot({\n  postAnswerBotQuestion,\n  updateAnswerBotFeedback,\n  updateAnswerBotPostID,\n  departments,\n}) {\n  //////////////// Send Question to AnswerBot ////////////////\n\n  // Instrucciones (query principal)\n  const instructions = \"Instructions: Compose a comprehensive reply to the query using the search results given.\\n If the search results mention multiple subjects\\nwith the same name, create separate answers for each. Only include information found in the results and\\ndon't add any additional information. Make sure the answer is correct and don't output false content.\\nIf the text does not relate to the query, simply state 'Sorry, I couldn't find an answer to your question.'. Don't write 'Answer:'Directly start the answer.\\n\";\n\n  // The chat history in the chatbot.\n  const [messages, setMessages] = useState([{ role: 'system', content: instructions }, { role: 'system', content: \"Hello! Ask me any question and I'll see how I can help you.\" }]);\n  // To save the id of the assigned department.\n  const [messagesID, setMessagesID] = useState([{ role: 'system', content: instructions, depa: null }, { role: 'system', content: \"Hello! Ask me any question and I'll see how I can help you.\", depa: null }]);\n  \n  // Variables for chatbot effects.\n  const messagesEndRef = useRef(null);\n  const [inputValue, setInputValue] = useState('');\n  const [isWaitingForResponse, setIsWaitingForResponse] = useState(false);\n\n  // To send the user's question to the bot, be able to receive an answer and register a new record in the AnswerBot table.\n  const handleInput = async (e) => {\n    e.preventDefault();\n\n    // Extracts the input.\n    const input = e.target.querySelector('input');\n    const message = input.value;\n\n    // Verifies that the input is greater than 13 characters in order to proceed with the process.\n    if (message.length > 13) {\n      input.value = '';\n\n      // Update specific variables for chatbot effects.\n      setInputValue(input.value)\n      setIsWaitingForResponse(true);\n      setMessages([...messages, { role: 'user', content: message }, { role: 'system', content: '' }]);\n\n      // Concatenate the user's question to the chat history and send it to the bot model.\n      const chatHistory = [...messages, { role: 'user', content: message }];\n      // Except the welcome message.\n      const filteredMessages = chatHistory.filter((mess, index) => index !== 1);\n      const response = await pdfConv(filteredMessages);\n\n      // Extract answer from bot response.\n      const answer = response.text;\n      setMessages([...messages, { role: 'user', content: message }, { role: 'system', content: answer }]);\n      setIsWaitingForResponse(false);\n\n      // Extract department from bot response.\n      const depaName = response.department;\n      const department = departments.find((c) => c.name === depaName);\n      setMessagesID([...messagesID, { role: 'user', content: message, depa: department?.department_id || 'wizeq' }, { role: 'system', content: answer, depa: department?.department_id || 'wizeq' }]);\n\n      // Create the payload.\n      const newQuestion = {\n        question_by_user: message,\n        answer_by_bot: answer,\n        assignedDepartment: department?.department_id || 'wizeq',\n      };\n\n      // Create a new record.\n      try {\n        await postAnswerBotQuestion(newQuestion);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  };\n\n  // Updates the variable every time the value of the input is changed.\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  // To update the view of the chatbot box to the last message.\n  useEffect(() => {\n    const scrollToBottom = () => {\n      if (messagesEndRef.current) {\n        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n      }\n    };\n    scrollToBottom();\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const [chatbotVisible, setChatbotVisible] = useState(false);\n\n  // To open and close the chatbot.\n  const handleChatbotToggle = () => {\n    setChatbotVisible(!chatbotVisible);\n  };\n\n  //////////////// Feedback to AnswerBot ////////////////\n\n  const [showThanksMessage, setShowThanksMessage] = useState({});\n\n  // To update the response feedback to positive.\n  const handleLikeClick = async (index) => {\n\n    // Show thanks message.\n    setShowThanksMessage((prevShowThanksMessage) => ({\n      ...prevShowThanksMessage,\n      [index]: true,\n    }));\n\n    // Create the payload.\n    const updateFeedback = {\n      question_by_user: messages[index].content,\n      answer_by_bot: messages[index+1].content,\n      answer_feedback: 1,\n      assignedDepartment: messagesID[index].depa,\n    };\n\n    // Update the feedback of the record.\n    try {\n      await updateAnswerBotFeedback(updateFeedback);\n    } catch (error) {\n      throw error;\n    }\n\n    // Set a time to fade the gratitude message.\n    setTimeout(() => {\n      setShowThanksMessage((prevShowThanksMessage) => ({\n        ...prevShowThanksMessage,\n        [index]: 'na',\n      }));\n    }, 2500);\n  };\n\n  // To update the response feedback to negative.\n  const handleDislikeClick = async (index) => {\n\n    // Show thanks message.\n    setShowThanksMessage((prevShowThanksMessage) => ({\n      ...prevShowThanksMessage,\n      [index]: true,\n    }));\n\n    // Show a message if the user would like to share the question in the forum.\n    setTimeout(() => {\n      setShowThanksMessage((prevShowThanksMessage) => ({\n        ...prevShowThanksMessage,\n        [index]: \"Would you like to share your question with the community?\",\n      }));\n    }, 1500);\n\n    // Create the payload.\n    const updateFeedback = {\n      question_by_user: messages[index].content,\n      answer_by_bot: messages[index+1].content,\n      answer_feedback: -1,\n      assignedDepartment: messagesID[index].depa,\n    };\n\n    // Update the feedback of the record.\n    try {\n      await updateAnswerBotFeedback(updateFeedback);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // To post a question and be able to link it to the record made in the AnswerBot table.\n  const handlePublishQuestion = async (index) => {\n    // Create the payload.\n    const updatePostID = {\n      question: messages[index].content,\n      answer: messages[index+1].content,\n      assignedDepartment: messagesID[index].depa,\n    };\n\n    // Update the id of the posted question with the answerbot's\n    try {\n      await updateAnswerBotPostID(updatePostID)\n    } catch (error) {\n      throw error;\n    }\n\n    // Show thanks message.\n    setShowThanksMessage((prevShowThanksMessage) => ({\n      ...prevShowThanksMessage,\n      [index]: \"Your question has been published successfully.\",\n    }));\n\n    // Set a time to fade the gratitude message.\n    setTimeout(() => {\n      setShowThanksMessage((prevShowThanksMessage) => ({\n        ...prevShowThanksMessage,\n        [index]: 'na',\n      }));\n    }, 2500);\n  };\n\n  /////////////////// User ///////////////////\n\n  const profile = useUser();\n\n  if (!profile) {\n    return;\n  }\n\n  //////////////// Components ////////////////\n\n  return (\n    <div>\n      <Styled.BotButton visible={!chatbotVisible} onClick={handleChatbotToggle}>\n        <Styled.BotIcon />\n        <Styled.BotMessage className=\"message\">\n          Hi, I&apos;m AnswerBot!\n          <br />\n          Ask me anything!\n        </Styled.BotMessage>\n      </Styled.BotButton>\n\n      <Styled.ChatbotContainer visible={chatbotVisible}>\n        <Styled.ChatbotHeader>\n          <Styled.IconBot style={{ position: 'absolute' }} />\n          <Styled.BotName> AnswerBot </Styled.BotName>\n          <Styled.CloseButton onClick={handleChatbotToggle}> \u2715 </Styled.CloseButton>\n        </Styled.ChatbotHeader>\n\n        <Styled.ChatbotMessages>\n          {messages.slice(1).map((message, index) => (\n            message.role === 'user' ? (\n              <Styled.ChatbotRowMessage style={{ justifyContent: 'flex-end' }}>\n                <Styled.Message\n                  key={`message-${message.id}`}\n                  className=\"user\"\n                  ref={messagesEndRef}\n                >\n                  {message.content}\n                </Styled.Message>\n                <Styled.IconUser src={profile.profile_picture} />\n              </Styled.ChatbotRowMessage>\n            )\n              : (\n                <div>\n                  <Styled.ChatbotRowMessage style={{ justifyContent: 'flex-start' }}>\n                    <Styled.IconBot />\n                    <Styled.Message\n                      key={`message-${message.id}`}\n                      className=\"bot\"\n                      ref={messagesEndRef}\n                      isWaiting={isWaitingForResponse && index + 2 === messages.length}\n                    >\n                      {message.content}\n                    </Styled.Message>\n                  </Styled.ChatbotRowMessage>\n                  {index !== 0 && (\n                  <div>\n                    {!showThanksMessage[index] && (\n                      <>\n                      {(index !== messages.length-2 || !isWaitingForResponse) && (\n                        <>\n                          <Styled.LikeButton\n                            key={`like-${index}`}\n                            onClick={() => handleLikeClick(index)}\n                          />\n                          <Styled.DislikeButton\n                            key={`dislike-${index}`}\n                            onClick={() => handleDislikeClick(index)}\n                          />\n                         </>\n                        )}\n                      </>\n                    )}\n                    {showThanksMessage[index] && (\n                      <Styled.TextFeedback padding={showThanksMessage[index]}>\n                        {showThanksMessage[index] === true\n                          ? 'Thanks for the feedback!'\n                          : showThanksMessage[index] === 'na' ? '' : showThanksMessage[index]}\n                      </Styled.TextFeedback>\n                    )}\n                    {showThanksMessage[index] === \"Would you like to share your question with the community?\" && (\n                      <Styled.PublishButton onClick={() => handlePublishQuestion(index)}>\n                        Post question\n                      </Styled.PublishButton>\n                    )}\n                  </div>\n                )}\n                </div>\n              )\n          ))}\n        </Styled.ChatbotMessages>\n\n        <Styled.ChatbotInput onSubmit={handleInput}>\n          <Styled.Input\n            type=\"text\"\n            placeholder=\"Enter your question...\"\n            onChange={handleChange}\n            disabled={isWaitingForResponse}\n            enabled={!isWaitingForResponse}\n            title='Type at least 14 characters'/>\n          <Styled.SendButton type=\"submit\" inputLength={inputValue.length} disabled={isWaitingForResponse}/>\n        </Styled.ChatbotInput>\n      </Styled.ChatbotContainer>\n    </div>\n  );\n}\n\nAnswerBot.propTypes = {\n  postAnswerBotQuestion: PropTypes.func.isRequired,\n  updateAnswerBotFeedback: PropTypes.func.isRequired,\n  updateAnswerBotPostID: PropTypes.func.isRequired,\n  departments: PropTypes.arrayOf(\n    PropTypes.shape(),\n  ),\n};\n\nAnswerBot.defaultProps = {\n  departments: [],\n};\n\nexport default AnswerBot;\n", "import styled, { keyframes, css } from 'styled-components';\n\nimport botImage from 'app/images/logo_answerbot.png';\nimport postIcon from 'app/images/post-icon.png';\n\nimport likeIcon from 'app/images/like.png';\nimport dislikeIcon from 'app/images/dislike.png';\n\nimport likeHoverIcon from 'app/images/likeHover.png';\nimport dislikeHoverIcon from 'app/images/dislikeHover.png';\n\n/// ///////////////////////////////////// AnswerBot Button /////////////////////////////////////\n\nexport const BotButton = styled.button`\n    background-color: #213246;\n    border: none;\n    width: 8.4vw;\n    height: 8.4vw;\n    right: 0px;\n    position: fixed;\n    top: 70%;\n    border-top-left-radius: 25px;\n    border-bottom-left-radius: 25px;\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.5);\n    visibility: ${(props) => (props.visible ? 'visible' : 'hidden')};\n    transition: width 0.3s ease-in-out;\n\n    & > .message {\n        opacity: 0;\n        visibility: hidden;\n        transition: opacity 0.3s ease-in-out;\n    }\n\n    &:hover {\n        width: 19vw;\n\n        & > .message {\n            opacity: 1;\n            visibility: visible;\n            transition: opacity 0.25s ease-in-out;\n            transition-delay: 0.2s;\n        }\n        \n        @media screen and (min-width: 1600px) {\n            width: 14vw;\n        }\n\n        @media screen and (min-width: 2000px) {\n            width: 13vw;\n        }\n    }\n\n    @media screen and (max-width: 1025px) {\n        display: none;\n    }\n\n    @media screen and (min-width: 1600px) {\n        width: 6vw;\n        height: 6vw;\n    }\n`;\n\nexport const BotIcon = styled.img`\n    width: 5.6vw;\n    height: 5.6vw;\n    border-radius: 50%;\n    background-color: #fff;\n    border: none;\n    background-image: url(${botImage});\n    background-size: 75%;\n    background-repeat: no-repeat;\n    background-position: center;\n    box-shadow: inset 0 0 10px 0 rgba(0, 0, 0, 0.5);\n    position: absolute;\n    left: 1.5vw;\n    transform: translateY(-50%);\n\n    @media screen and (min-width: 1600px) {\n        width: 4vw;\n        height: 4vw;\n        left: 1.25vw;\n    }\n`;\n\nexport const BotMessage = styled.div`\n    color: #fff;\n    font-size: 115%;\n    font-weight: bold;\n    position: absolute;\n    right: 1.3vw;\n    padding-left: 7.85vw;\n    transform: translateY(-50%);\n\n    @media screen and (max-width: 1240px) {\n        font-size: 100%;\n        right: 1.1vw;\n    }\n\n    @media screen and (max-width: 1100px) {\n        font-size: 85%;\n    }\n\n    @media screen and (min-width: 1600px) {\n        font-size: 90%;\n        padding-left: 5vw;\n    }\n\n`;\n\n/// ////////////////////////////////////// ChatBot /////////////////////////////////////////\n\nexport const ChatbotContainer = styled.div`\n    position: fixed;\n    bottom: 0px;\n    right: 0px;\n    width: 330px;\n    height: 430px;\n    border-top-left-radius: 20px;\n    border-top-right-radius: 20px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n    background-color: #E1EAF4;\n    display: flex;\n    flex-direction: column;\n    transition: visibility 0.3s ease-in-out;\n    visibility: ${(props) => (props.visible ? 'visible' : 'hidden')};\n\n    @media screen and (max-width: 1025px) {\n        display: none;\n    }\n\n    @media screen and (max-height: 450px) {\n        display: none;\n    }\n`;\n\nexport const ChatbotHeader = styled.div`\n    background-color: #213246;\n    height: 40px;\n    border-top-left-radius: 20px;\n    border-top-right-radius: 20px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 47.5px;\n`;\n\nexport const IconBot = styled.img`\n    width: 25px;\n    height: 25px;\n    border-radius: 50%;\n    background-color: #fff;\n    border: 0px solid transparent;\n    background-image: url(${botImage});\n    background-size: 75%;\n    background-repeat: no-repeat;\n    background-position: center;\n    box-shadow: inset 0 0 10px 0 rgba(0, 0, 0, 0.5);\n    left: 5%;\n    margin: 5px 0px;\n`;\n\nexport const IconUser = styled.img`\n    width: 25px;\n    height: 25px;\n    border-radius: 50%;\n    background-color: #fff;\n    border: 0px solid transparent;\n    box-shadow: inset 0 0 10px 0 rgba(0, 0, 0, 0.5);\n    margin-right: 10px;\n    margin: 5px 0px;\n`;\n\nexport const BotName = styled.div`\n    display: flex;\n    align-items: center;\n    font-weight: bold;\n    color: #fff;\n    padding: 0 85px;\n\n    @media screen and (min-width: 2975px) {\n        padding: 0 75px;\n    }\n`;\n\nexport const CloseButton = styled.button`\n    color: #fff;\n    font-size: 15px;\n    background-color: transparent;\n    border: none;\n    transform: scale(1);\n    transition: transform 0.3s ease-in-out;\n\n    &:hover {\n        transform: scale(1.4);\n    }\n`;\n\nexport const ChatbotMessages = styled.div`\n    flex: 1;\n    padding: 10px;\n    overflow-y: auto;\n`;\n\nexport const ChatbotRowMessage = styled.div`\n    display: flex;\n    alignItems: center;\n`;\n\nconst blinkAnimation = keyframes`\n  0% {\n    opacity: 0.2;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    opacity: 0.2;\n  }\n`;\n\nexport const Message = styled.div`\n    padding: 10px 10px;\n    border-bottom-right-radius: 10px;\n    border-bottom-left-radius: 10px;\n    margin: 5px 7.5px;\n    max-width: 80%;\n    word-break: break-word;\n\n    &.user {\n        background-color: #fff;\n        border-top-left-radius: 10px;\n        align-self: flex-end;\n        color: #000;\n        text-align: right;\n        \n    }\n\n    &.bot {\n        background-color: #213246;\n        border-top-right-radius: 10px;\n        color: #fff;\n\n        ${(props) => props.isWaiting && css`\n          position: relative;\n          overflow: hidden;\n\n          &:after {\n            content: '...';\n            animation: ${blinkAnimation} 1s infinite alternate;\n            animation-delay: ${props.index * 0.2}s;\n          }\n        `}\n    }\n`;\n\nexport const ChatbotInput = styled.form`\n    display: flex;\n    align-items: center;\n    width: 330px;\n    background-color: #fff;\n`;\n\nexport const Input = styled.input`\n    flex: 1;\n    padding: 10px;\n    border: none;\n    outline: none;\n    cursor: ${(props) => (props.enabled ? 'text' : 'not-allowed')};\n`;\n\nexport const SendButton = styled.button`\n    width: 30px;\n    height: 30px;\n    border-radius: 25%;\n    background-color: #fff;\n    border: none;\n    background-image: url(${postIcon});\n    background-size: 50%;\n    background-repeat: no-repeat;\n    background-position: center;\n    margin: 5px 5px;\n    opacity: ${(props) => (props.inputLength > 13 ? 1 : 0.3)};\n    cursor: ${(props) => (props.inputLength > 13 ? 'pointer' : 'not-allowed')};\n    transition: background-color 0.3s ease-in-out;\n\n    &:hover {\n        background-color: ${(props) => (props.inputLength > 13 ? '#F2F2F1' : '#fff') };\n    }\n`;\n\n/// ////////////////////////////////////// Feedback /////////////////////////////////////////\n\nexport const LikeButton = styled.button`\n    width: 20px;\n    height: 20px;\n    border: none;\n    background-color: transparent;\n    background-image: url(${likeIcon});\n    background-size: 75%;\n    background-repeat: no-repeat;\n    background-position: center;\n    margin: 0 0 2.5% 12.5%;\n    padding: 0 5px;\n    transition: background-image 0.3s ease-in-out;\n\n    &:hover {\n        background-image: url(${likeHoverIcon});\n    }\n`;\n\nexport const DislikeButton = styled.button`\n    width: 20px;\n    height: 20px;\n    border: none;\n    background-color: transparent;\n    background-image: url(${dislikeIcon});\n    background-size: 75%;\n    background-repeat: no-repeat;\n    background-position: center;\n    transition: background-image 0.3s ease-in-out;\n\n    &:hover {\n        background-image: url(${dislikeHoverIcon});\n    }\n`;\n\nexport const TextFeedback = styled.span`\n    padding: ${(props) => (props.padding === 'na' ? '0px 0px' : '5px 31px')};\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    text-align: left;\n`;\nexport const PublishButton = styled.button`\n    margin: 0 0 2.5% 10%;\n    background-color: #fff;\n    color: #213246;\n    border: 1px solid #213246;\n    padding: 8px 25px;\n    border-radius: 4px;\n    font-size: 14px;\n    cursor: pointer;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1), 0 4px 8px rgba(0, 0, 0, 0.1);\n    transition: background-color 0.3s ease, color 0.3s ease;\n\n    &:hover {\n        background-color: #213246;\n        color: #fff;\n    }\n`;", "const pdfConv = async (conversation) => fetch('http://127.0.0.1:3000/api/pdf_conversation_gpt', {\n  method: 'POST',\n  body: JSON.stringify(conversation),\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n  .then((response) => response.json())\n  .then((data) => ({ text: data.conversation[data.conversation.length - 1].content, department: data.department }))\n  .catch((error) => {\n    throw new Error(`There was an error making the API call: ${error.message}`);\n  });\n\nexport default pdfConv;\n", "export { default } from './AnswerBot';\n"],
  "mappings": "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",
  "names": []
}
